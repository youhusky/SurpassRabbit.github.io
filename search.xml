<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[react-navigation 2.x使用技巧]]></title>
    <url>%2F2018%2F08%2F05%2Freact-navigation%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%2F</url>
    <content type="text"><![CDATA[本文是基于最新的react-navigation^2.5.3来书写的。如果遇到什么问题可以在评论区回复，或者加QQ群397885169讨论 识兔，一款用来识别图片的开源项目，在未来还会添加更多有意思的东西 现已重构，纯项目使用mobx管理状态，完全按照线上项目进行架构，欢迎star react-navigation使用技巧(进阶篇) 什么是react-navigation?react-native从开源至今，一直存在几个无法解决的毛病，偶尔就会复发让人隐隐作痛，提醒你用的不是原生，其中包括列表的复用问题，导航跳转不流畅的问题等等。终于facebook坐不住了，在前一段时间开始推荐使用react-navigation，并且在0.44发布的时将之前一直存在的Navigator废弃了。react-navigation是致力于解决导航卡顿，数据传递，Tabbar和navigator布局，支持redux。虽然现在功能还不完善，但基本是可以在项目中推荐使用的。 属性react-navigation分为三个部分。StackNavigator类似顶部导航条，用来跳转页面和传递参数。TabNavigator类似底部标签栏，用来区分模块。DrawerNavigator抽屉，类似从App左侧滑出一个页面，在这里不做讲解。下面会分开讲解官网提供的配置方法，但顺序可能会官网不一样。 距离我上一个版本的react-navigation教程已经有1年多的时间了，虽然一直在缝缝补补，但那个教程真的老了。正好react-navigation V2版本也即将要正式发布了，趁着这次机会重新梳理一下教程，并把之前的坑和遗憾填补一下。 我会将本文分成三部分，第一部分是介绍API，第二部分是常用属性方法，第三部分是使用小技巧。 APIcreateSwitchNavigator SwitchNavigator的目的是一次只显示一个屏幕。默认情况下，它不处理回退操作，并在您切换时将路由重置为默认状态。这是我们从登录流程（包含注册，登录，忘记密码等）到主屏幕的必要流程。这个方法在1.x中叫做SwitchNavigator，在2.x中统一命名为createSwitchNavigator 1createSwitchNavigator(RouteConfigs, SwitchNavigatorConfig); RouteConfigs 路由的配置表，详细配置可以参考下面的createStackNavigator SwitchNavigatorConfig SwitchNavigator属性 initialRouteName - 第一次加载时初始选项卡路由的routeName。 resetOnBlur - 切换离开屏幕时，重置所有嵌套导航器的状态。默认为true。 paths - 提供routeName到path的深度链接，它会覆盖RouteConfigs中设置的路径。 backBehavior - 后退按钮是否会导致标签切换到初始路由？如果是，则设置为initialRoute，否则none。默认为none。 12345678910export default createSwitchNavigator( &#123; AuthLoading: AuthLoadingScreen, App: AppStack, Auth: AuthStack, &#125;, &#123; initialRouteName: &apos;AuthLoading&apos;, &#125;); createStackNavigator 配置路由属性和参数这个方法在1.x中叫做StackNavigator，在2.x中统一命名为createStackNavigator 1createStackNavigator(RouteConfigs, StackNavigatorConfig); RouteConfigs screen - 对应界面名称，是一个React组件 path - 深度链接路径，从其他App或者web跳转到该App需要设置该路径 navigationOptions - 用于屏幕的默认导航选项 StackNavigatorConfig可选的路由属性 initialRouteName - 设置默认屏幕。必须为路由配置中的某个screen。 initialRouteParams - 初始路由路线的参数。 navigationOptions - 用于屏幕的默认导航选项。 paths - 覆盖路由配置中设置的路径的映射。 可选的视觉选项 mode - 定义渲染和转换的样式 card - 使用标准的iOS和Android屏幕转换。这是默认属性。 modal - 使屏幕从底部滑入，这是一种常见的iOS模式。只适用于iOS，对Android没有影响。 headerMode - 定义如何呈现标题 float - 在屏幕更改时渲染保留在顶部的单个标题和动画。这是iOS上的常见效果。 screen - 每个屏幕都附有一个标题，标题与屏幕一起淡入和淡出。这是Android上的常见效果。 none - 不会显示标题。 headerTransitionPreset - 指定标题在headerMode: float启用时应该如何从一个屏幕切换到另一个屏幕。 fade-in-place - 标题组件在不移动的情况下淡入淡出，类似于iOS的Twitter，Instagram和Facebook应用程序。这是默认值。 uikit - iOS的默认效果。 cardStyle - 使用此道具覆盖或扩展堆栈中单个卡的默认样式。 transitionConfig - 函数返回与默认屏幕转换合并的对象（查看类型定义中的TransitionConfig ）。提供的函数将传递以下参数： transitionProps - 新屏幕的过渡转换。 prevTransitionProps - 旧屏幕的过渡转换。 isModal - 指定屏幕是否为模态。 onTransitionStart - 跳转动画即将开始时要调用的函数。 onTransitionEnd - 跳转动画完成后调用的函数。 navigationOptions 导航页面的属性和方法 title - 可用作的headerBackTitle的标题。此外，将用作tabBarLabel（如果嵌套在TabNavigator中）或drawerLabel（如果嵌套在DrawerNavigator中）的回退标题。 header - 返回一个React元素，用来作为标题。设置null会隐藏标题。 headerTitle - 可以传入字符串，React Element，React Component。默认是用上面的title作为标题。当使用Component时，它接受allowFontScaling，style和children作为属性。title会被放在children中。 headerTitleAllowFontScaling - 标题字体是否应该缩放以遵循系统设置。默认值为true。 headerBackImage - 接受React Element或者Component用来显示自定义的后退按钮中的图片。当使用组件时，它会得到(tintColor，title)参数。默认为react-navigation/views/assets/back-icon.png路径下的图片，这是区分平台的默认图标。 headerBackTitle - iOS上后退按钮使用的文字，传递null会禁用标签。默认为前一场景headerTitle。 headerTruncatedBackTitle - 当后退按钮使用的标题字符串headerBackTitle不适合屏幕时(比如说文字过长)，会默认显示Back。 headerRight - 接受React Element将会显示在标题的右侧。 headerLeft - 接受React Element或者React Component将会显示在标题的左侧。当传递一个组件的时候，会得到（onPress，title，titleStyle还有更多，请参考Header.js以获得完整的列表）。 headerStyle - 标题的样式 headerForceInset - 允许将forceInset对象传递给标题中，使用的内部SafeAreaView。 headerTitleStyle - 标题组件的样式 headerBackTitleStyle - 标题上后退按钮文字样式 headerTintColor - 标题组件的色调 headerPressColorAndroid - 材质纹波的颜色（仅限Android&gt; = 5.0） headerTransparent - 默认为false。如果为true标题将没有背景，除非你明确提供了headerStyle或headerBackground。 headerBackground - 将此与headerTransparent一起使用，以提供一个组件在标题的背景中呈现。例如，您可以将其用于模糊视图，以创建半透明标题。 gesturesEnabled - 是否可以使用手势来返回到上一页。在iOS上默认为true，在Android上为false。 gestureResponseDistance - 用于覆盖触摸从屏幕边缘开始识别手势的距离的对象。它具有以下属性： horizontal - number - 水平方向的距离。默认为25。 vertical - number - 垂直方向的距离。默认为135。 gestureDirection - 传递字符串用来覆盖关闭手势的方向。default为正常行为或inverted从右到左滑动。 Navigator Props 由StackNavigator（…）创建的导航器组件拥有下面的属性： screenProps - 将其他选项传递给子屏幕 createTabNavigator createTabNavigator已弃用。请改用createBottomTabNavigator和/或createMaterialTopTabNavigator。 createBottomTabNavigator 屏幕底部的简单标签栏，可让您在不同路由之间切换。路由是被懒惰初始化的 - 它们的屏幕组件直到第一次选中时才会初始化。这个方法在1.x中叫做TabNavigator，在2.x中统一命名为createBottomTabNavigator 1createBottomTabNavigator(RouteConfigs, BottomTabNavigatorConfig); RouteConfigs 属性请参考createStackNavigator。它的navigationOptions和createStackNavigator不一样，下面会有说明。 BottomTabNavigatorConfig initialRouteName - 第一次加载时初始选项卡路由的routeName。 order - 定义选项卡顺序的routeNames数组。 paths - 提供routeName到path的深度链接，它会覆盖RouteConfigs中设置的路径。 backBehavior - 后退按钮是否会导致标签切换到初始路由？如果是，则设置为initialRoute，否则none。默认为initialRoute。 tabBarComponent - Options，覆盖用作标签栏的组件。 tabBarOptions - 标签栏具有如下属性： activeTintColor - 活动选项卡的标签和图标颜色。(选中) activeBackgroundColor - 活动选项卡的背景颜色。(选中) inactiveTintColor - 非活动选项卡的标签和图标颜色。(未选中) inactiveBackgroundColor - 非活动选项卡的背景颜色。(未选中) showLabel - 是否显示标签，默认为true。 style - 标签栏的样式。 labelStyle - 标签栏文字的样式。 tabStyle - 选项卡的样式。 allowFontScaling - 标题字体是否应该缩放以遵循系统设置。默认值为true。 navigationOptions 标签栏的属性和方法 title - 通用标题可以用作headerTitle和tabBarLabel。 tabBarVisible - 显示或隐藏底部标签栏，默认为true，不隐藏。 tabBarIcon - React Element或给定{focused：boolean，tintColor：string}的函数返回一个React.Node，用来显示在标签栏中。 tabBarLabel - 接收字符串、React Element或者给定{focused：boolean，tintColor：string}的函数返回一个React.Node，用来显示在标签栏中。如果未定义，会使用title作为默认值。如果想要隐藏，可以参考上面的tabBarOptions.showLabel。 tabBarOnPress - 标签栏点击事件回调，接受一个对象，其中包含如下： 1234567891011121314tabBarOnPress: async (obj: any) =&gt; &#123; console.log(obj); try &#123; const userData = await AsyncStorage.getItem(&apos;USER_INFO&apos;); if (userData) &#123; obj.defaultHandler(); &#125; else &#123; obj.navigation.navigate(&apos;Login&apos;); &#125; &#125; catch (e) &#123; Toast.show(e.message, &apos;center&apos;, 1000); &#125; &#125; createMaterialTopTabNavigator 实现了类似react-native-scrollable-tab-view的左右滚动效果，但每个tab页是没有懒加载的，就是说，当使用这个生成导航的时候，每个页面都会初始化，对内存影响较大。这个导航是基于react-native-tab-view实现的，如果有需要可以研究。 1createMaterialTopTabNavigator(RouteConfigs, TabNavigatorConfig); RouteConfigs 属性请参考createStackNavigator。 TabNavigatorConfig initialRouteName - 第一次加载时初始选项卡路由的routeName。 order - 定义选项卡顺序的routeNames数组。 paths - 提供routeName到path的深度链接，它会覆盖RouteConfigs中设置的路径。 backBehavior - 后退按钮是否会导致标签切换到初始路由？如果是，则设置为initialRoute，否则none。默认为initialRoute。 swipeEnabled - 是否允许在标签之间滑动。 animationEnabled - 改变标签时是否使用动画。 configureTransition - 给定currentTransitionProps和nextTransitionProps返回一个描述选项卡之间动画的配置对象的函数。 initialLayout - 包含初始height和可选对象width，可以传递以防止react-native-tab-view出现一帧的延迟。 tabBarComponent - Options，覆盖用作标签栏的组件。 tabBarOptions - 标签栏具有如下属性： activeTintColor - 活动选项卡的标签和图标颜色。(选中) inactiveTintColor - 非活动选项卡的标签和图标颜色。(未选中) showIcon - 是否显示标签图标，默认为false。 showLabel - 是否显示标签，默认为true。 upperCaseLabel - 是否使标签大写，默认为true。 pressColor - 纹波的颜色（仅限Android&gt; = 5.0）。 pressOpacity - 按下标签的不透明度（仅iOS和Android &lt;5.0）。 scrollEnabled - 是否启用可滚动标签。 tabStyle - 选项卡的样式。 indicatorStyle - 选项卡指示符的样式（选项卡底部线的颜色）。 labelStyle - 标签栏文字的样式。 iconStyle - 选项卡图标的样式。 style - 标签栏的样式。 allowFontScaling - 标题字体是否应该缩放以遵循系统设置。默认值为true。 navigationOptions title - 通用标题可以用作headerTitle和tabBarLabel。 swipeEnabled - 如果未设置，则遵循TabNavigatorConfig选项swipeEnabled。启用或禁用标签之间的滑动操作为true或false。 tabBarIcon - React Element或给定{focused：boolean，tintColor：string}的函数返回一个React.Node，用来显示在标签栏中。 tabBarLabel - 接收字符串、React Element或者给定{focused：boolean，tintColor：string}的函数返回一个React.Node，用来显示在标签栏中。如果未定义，会使用title作为默认值。如果想要隐藏，可以参考上面的tabBarOptions.showLabel。 tabBarOnPress - 标签栏点击事件回调，接受一个对象，其中包含如下： 1234567891011121314tabBarOnPress: async (obj: any) =&gt; &#123; console.log(obj); try &#123; const userData = await AsyncStorage.getItem(&apos;USER_INFO&apos;); if (userData) &#123; obj.defaultHandler(); &#125; else &#123; obj.navigation.navigate(&apos;Login&apos;); &#125; &#125; catch (e) &#123; Toast.show(e.message, &apos;center&apos;, 1000); &#125; &#125; createDrawerNavigator 创建侧边栏导航，有一些坑，需要用过才知道。 1createDrawerNavigator(RouteConfigs, DrawerNavigatorConfig) RouteConfigs 属性请参考createStackNavigator。 DrawerNavigatorConfig drawerWidth - 抽屉的宽度或返回一个新的函数。 drawerPosition - 抽屉出现的方向left或right，默认left。 contentComponent - 用于呈现抽屉内容的组件，例如导航项。接收navigation抽屉的属性。默认为DrawerItems。有关更多信息，请参见下文。 contentOptions - 配置抽屉内容，请参见下文。 useNativeAnimations - 启用本地动画。默认是true。 drawerBackgroundColor - 设置抽屉的背景背景。默认是white。 initialRouteName - 第一次加载时初始选项卡路由的routeName。 order - 定义选项卡顺序的routeNames数组。 paths - 提供routeName到path的深度链接，它会覆盖RouteConfigs中设置的路径。 backBehavior - 后退按钮是否会导致标签切换到初始路由？如果是，则设置为initialRoute，否则none。默认为initialRoute。 contentComponent 提供自定义的抽屉效果抽屉的默认组件是可滚动的，只包含RouteConfig中路由的链接。您可以轻松地覆盖默认组件，以向抽屉中添加页眉，页脚或其他内容。默认情况下，抽屉可滚动并支持iPhone X安全区域。如果您自定义内容，请务必将内容包装在SafeAreaView中 DrawerItems的contentOptions items - 路由数组，可以修改或覆盖。 activeItemKey - 识别活动路线的key。 activeTintColor - 活动标签的标签和图标颜色。(选中) activeBackgroundColor - 活动标签的背景颜色。(选中) inactiveTintColor - 不活动标签的标签和图标颜色。(未选中) inactiveBackgroundColor - 不活动标签的背景颜色。(未选中) onItemPress(route) - 按下某个Item时调用的函数。 itemsContainerStyle - item内容的样式。 itemStyle - 单个Item样式，其中可以包含图标和标签。 labelStyle - 当标签是字符串时，会覆盖文字的样式。 activeLabelStyle - 当标签是字符串时，会覆盖选中的文字样式。 inactiveLabelStyle - 当标签是字符串时，会覆盖未选中的文字样式。 iconContainerStyle - 用来覆盖icon的样式 Screen Navigation Options title - 通用标题可以用作headerTitle和tabBarLabel。 drawerLabel - 可以传入字符串，React Element或给定{focused：boolean，tintColor：string}的函数返回一个React.Node，用来显示在抽屉边栏中。当不设置时，默认使用title。 drawerIcon - React Element或给定{focused：boolean，tintColor：string}的函数返回一个React.Node，用来显示在抽屉边栏中。 drawerLockMode - 指定抽屉的锁定模式。这也可以通过在顶级路由器上使用screenProps.drawerLockMode动态更新。 enum(&#39;unlocked&#39;, &#39;locked-closed&#39;, &#39;locked-open&#39;) createMaterialBottomTabNavigator这个方法在2.0正式版中被砍掉了，但官方文档没有更新，如果喜欢material风格，可以参考react-native-material-bottom-navigation常用属性方法 这部分会分为createStackNavigator和createDrawerNavigator两部分，因为它们属性不太一样。 createStackNavigator常用方法 在新版的react-navigation中实现了很多常用的api，比如说push，pop，popToTop等常用方法，在本文中会将属性和使用方法简单说明。 NavigationActions Navigate - 用来跳转到其他路由的方法 routeName - String - 必须 - 在RouteConfigs中注册过的路由名称 params - Object - 可选 - 传递的参数 action - Object - 可选 - （高级）如果屏幕是导航器，则在子路由器中运行的子操作。本文档中描述的任何一项操作都可以设置为子操作。 key - String - 可选 - 要导航到的路线的标识符。如果它已经存在，则返回到此路线。 1234567import &#123; NavigationActions &#125; from &apos;react-navigation&apos;;const navigateAction = NavigationActions.navigate(&#123; routeName: &apos;Profile&apos;, params: &#123;&#125;, action: NavigationActions.navigate(&#123; routeName: &apos;SubProfileRoute&apos; &#125;),&#125;);this.props.navigation.dispatch(navigateAction); Back - 用来返回到上一个路由或其他路由 Key - String | null - 如果设置，导航将从给定的键返回。如果为空，导航将返回到上一级。 12345import &#123; NavigationActions &#125; from &apos;react-navigation&apos;;const backAction = NavigationActions.back(&#123; key: &apos;Profile&apos;,&#125;);this.props.navigation.dispatch(backAction); SetParams 在调用SetParams时，路由器将产生一个新的状态，该状态已经改变了由key标识的特定路由参数 params - Object - 可选 - 新的参数被合并到现有的路径参数中。 key - String - 必须 - 获取新参数的路由键。 1234567import &#123; NavigationActions &#125; from &apos;react-navigation&apos;;const setParamsAction = NavigationActions.setParams(&#123; params: &#123; title: &apos;Hello&apos; &#125;, key: &apos;screen-123&apos;,&#125;);this.props.navigation.dispatch(setParamsAction); Reset - 重置路由 Reset操作将重置整个导航状态并将其替换为新的导航。 index - number - 必须 - 导航中routes活动路由的索引state。 actions - array - 必须 - 将替换导航数组。 key - string | null - 可选 - 如果设置，具有给定键的导航器将重置。如果为null，则根导航器将被重置。 123456import &#123; StackActions, NavigationActions &#125; from &apos;react-navigation&apos;;const resetAction = StackActions.reset(&#123; index: 0, actions: [NavigationActions.navigate(&#123; routeName: &apos;Profile&apos; &#125;)],&#125;);this.props.navigation.dispatch(resetAction); Replace - 用新的route替换当前的route Replace操作将给定key上的路线替换为另一条路线。 key - string - 必须 - 要替换​​路由的key。 newKey - string - 用于替换路由的key。如果未提供，则自动生成。 routeName - string - 用于替换路由的routeName。 params - object - 要传入替换路由的参数。 action - object - 可选的子操作。 Push - 入栈 Push操作会在堆栈顶部添加一条路径并向前导航。这与之前的不同之处在于，如果某个组件已经存在路由中，navigate则会弹出到堆栈中的较早版本。Push将始终添加在顶部，因此可以多次安装组件。 routeName - string - 要跳转路由的routeName。 params - object - 传递的参数，可以通过(this.props.navigation.state.params)找到。 action - 子操作。 pop(n) - 出栈 Pop操作将使您回到堆栈中的前一个屏幕。n参数允许您指定要多少个屏幕出栈。 n - number - 要出栈的屏幕数量。 PopToTop - 回到栈顶 PopToTop操作会将您带回堆栈中的第一个屏幕，解除所有其他屏幕。它的功能与StackActions.pop({n: currentIndex})类似。 使用技巧跳转1234navigate(&apos;Detail&apos;,&#123; title:&apos;图片详情&apos;, url:item.url, &#125;); Detail：在StackNavigator中注册的页面，需要一一对应，才能跳转到相应的页面title：在跳转的页面可以通过this.props.navigation.state.params.title获取到这个参数。当然这个参数可以随便填写，都可以通过this.props.navigation.state.params.xxx获取。 最新版本中可以通过push来跳转页面 1this.props.navigation.push(&apos;Detail&apos;); 回调传参123456navigate(&apos;Detail&apos;,&#123; // 跳转的时候携带一个参数去下个页面 callback: (data)=&gt;&#123; console.log(data); // 打印值为：&apos;回调参数&apos; &#125; &#125;); 1234const &#123;navigate,goBack,state&#125; = this.props.navigation;// 在第二个页面,在goBack之前,将上个页面的方法取到,并回传参数,这样回传的参数会重走render方法state.params.callback(&apos;回调参数&apos;);goBack(); 自定义导航条项目中基本是没可能用自带的那个导航条的，自带导航条左侧的按钮永远是蓝色的，如果我们需要更改按钮颜色，就需要用到自定义的功能了。 1234567891011121314151617181920212223const StackOptions = (&#123;navigation&#125;) =&gt; &#123; console.log(navigation); let &#123;state,goBack&#125; = navigation; // 用来判断是否隐藏或显示header const visible= state.params.isVisible; let header; if (visible === true)&#123; header = null; &#125; const headerStyle = &#123;backgroundColor:&apos;#4ECBFC&apos;&#125;; const headerTitle = state.params.title; const headerTitleStyle = &#123;fontSize:FONT_SIZE(20),color:&apos;white&apos;,fontWeight:&apos;500&apos;&#125; const headerBackTitle = false; const headerLeft = ( &lt;Text onPress=&#123;()=&gt;&#123;goBack()&#125;&#125; &gt; 返回 &lt;/Text&gt; ); return &#123;headerStyle,headerTitle,headerTitleStyle,headerBackTitle,headerLeft,header&#125;&#125;; 然后通过下面的方法调用就可以自定制导航了。 123456789const MyApp = StackNavigator(&#123; MyTab: &#123; screen: MyTab, &#125;, Detail: &#123; screen: Detail, navigationOptions: (&#123;navigation&#125;) =&gt; StackOptions(&#123;navigation&#125;) &#125;,)&#125;; 在页面中使用的时候，在跳转页面的时候需要传递title参数，才能看到效果哦。 自定义tabbar早上有人问我，tabbar的图标可不可以使用原图，选中状态下可不可以设置其他图标。研究了一下官方文档，发现tabBarIcon除了tintColor还有另一个属性，用来判断选中状态的focused。 12345678910111213tabBarIcon: (&#123;tintColor,focused&#125;) =&gt; ( focused ? &lt;Image source=&#123;&#123;uri : &apos;识兔&apos;&#125;&#125; style=&#123;tabBarIcon&#125; /&gt; : &lt;Image source=&#123;&#123;uri : &apos;干货&apos;&#125;&#125; style=&#123;[tabBarIcon, &#123;tintColor: tintColor&#125;]&#125; /&gt; ), 通过判断focused，选中状态下使用识兔图标，未选中状态使用干货图标。如果想使用图标原来的样子，那就将style的tintColor去掉，这样就会显示图标原本的颜色。 再封装12345678910111213141516171819202122232425export const TabOptions = (tabBarTitle,normalImage,selectedImage,navTitle) =&gt; &#123; // console.log(navigation); const tabBarLabel = tabBarTitle; console.log(navTitle); const tabBarIcon = ((&#123;tintColor,focused&#125;)=&gt; &#123; return( focused ? &lt;Image source=&#123;&#123;uri : normalImage&#125;&#125; style=&#123;[TabBarIcon, &#123;tintColor: tintColor&#125;]&#125; /&gt; : &lt;Image source=&#123;&#123;uri : selectedImage&#125;&#125; style=&#123;[TabBarIcon, &#123;tintColor: tintColor&#125;]&#125; /&gt; ) &#125;); const headerTitle = navTitle; const headerTitleStyle = &#123;fontSize:FONT_SIZE(20),color:&apos;white&apos;&#125;; // header的style const headerStyle = &#123;backgroundColor:&apos;#4ECBFC&apos;&#125;; return &#123;tabBarLabel,tabBarIcon,headerTitle,headerTitleStyle,headerStyle&#125;;&#125;; 在static中使用this方法我之前文章中是将navaigationOptions的方法写在了app.js中，没有在页面中通过static navaigationOptions来初始化页面，这段时间刚好有人问，所以在这里就写一下该怎么弄。 首先需要在componentDidMount(){}中动态的添加点击事件12345678属性给paramscomponentDidMount()&#123; this.props.navigation.setParams(&#123; title:&apos;自定义Header&apos;, navigatePress:this.navigatePress &#125;)&#125; 1234navigatePress = () =&gt; &#123; alert(&apos;点击headerRight&apos;); console.log(this.props.navigation);&#125; 接下来就可以通过params方法来获取点击事件了12345678static navigationOptions = (&#123; navigation, screenProps &#125;) =&gt; (&#123; title: navigation.state.params?navigation.state.params.title:null, headerRight:( &lt;Text onPress=&#123;navigation.state.params?navigation.state.params.navigatePress:null&#125;&gt; 返回 &lt;/Text&gt; )&#125;); 让安卓实现push动画之前我群里的讨论怎么让安卓实现类似iOS的push动画，后来翻看官方issues的时候，真的发现了实现push动画的代码，在这里共享下 1234567891011// 在2.x版本中，需要引入下面的方法import StackViewStyleInterpolator from &apos;react-navigation/src/views/StackView/StackViewStyleInterpolator&apos;;// 在StackNavigator配置headerMode的地方，使用transitionConfig添加&#123; headerMode: &apos;screen&apos;, transitionConfig:()=&gt;(&#123; screenInterpolator: StackViewStyleInterpolator.forHorizontal, &#125;)&#125; 安卓上，使用TextInput的时候会让TabBar顶起来的解决办法最简单的解决办法就是在android目录中，添加一句话 目录：android/app/src/main/AndroidManifest.xml中，添加 1android:windowSoftInputMode=&quot;stateAlwaysHidden|adjustPan|adjustResize&quot; ps：在iOS下如果想一劳永逸的解决键盘问题，请使用IQKeyBoardManager。 总结react-navigation才开始用的时候感觉是复杂的，但用的多了，会感觉真的很不错。如果在文章中有什么不懂的问题，欢迎在评论区评论，也可以发私信，加QQ群397885169一起讨论哦]]></content>
  </entry>
  <entry>
    <title><![CDATA[测试]]></title>
    <url>%2F2018%2F08%2F01%2Ftest%2F</url>
    <content type="text"><![CDATA[哈哈哈哈]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F07%2F26%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post 1111111$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
